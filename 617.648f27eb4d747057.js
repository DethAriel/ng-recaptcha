"use strict";(self.webpackChunkdemo=self.webpackChunkdemo||[]).push([[617],{3617:(S,o,n)=>{n.r(o),n.d(o,{DemoModule:()=>C,PreloadedRecaptchaAPIService:()=>j,service:()=>d});var m=n(6814),g=n(9168),y=n(5125),v=n(7734),t=n(9776),h=n(1386),p=n(9212);let f=(()=>{var s;class e{resolved(a){console.log(`Resolved captcha with response: ${a}`)}}return(s=e).\u0275fac=function(a){return new(a||s)},s.\u0275cmp=p.Xpm({type:s,selectors:[["recaptcha-demo"]],decls:1,vars:0,consts:[[3,"resolved"]],template:function(a,r){1&a&&(p.TgZ(0,"re-captcha",0),p.NdJ("resolved",function(c){return r.resolved(c)}),p.qZA())},dependencies:[t.wT],encapsulation:2}),e})();var i=n(2598);let j=(()=>{var s;class e{constructor(a){const r=new y.X(null);if(this.ready=r.asObservable().pipe((0,v.h)(c=>null!=c)),typeof grecaptcha>"u"){const c=document.createElement("script"),_=(0,h.g)()?`&hl=${(0,h.g)()}`:"";c.src=`https://www.google.com/recaptcha/api.js?render=${a}${_}`,document.head.appendChild(c)}const u=setInterval(()=>{typeof grecaptcha>"u"||!(grecaptcha.render instanceof Function)||(clearInterval(u),r.next(grecaptcha))},50)}}return(s=e).\u0275fac=function(a){return new(a||s)(p.LFG(t.We,8))},s.\u0275prov=p.Yz7({token:s,factory:s.\u0275fac}),e})();const d=new j,k=[{path:"",component:f,data:{page:{feature:"preload-api",title:"Preloaded reCAPTCHA API Example",content:{component:'<span class="hljs-keyword">import</span> { <span class="hljs-title class_">Component</span> } <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;@angular/core&quot;</span>;\n\n<span class="hljs-meta">@Component</span>({\n  <span class="hljs-attr">selector</span>: <span class="hljs-string">&quot;recaptcha-demo&quot;</span>,\n  <span class="hljs-attr">templateUrl</span>: <span class="hljs-string">&quot;./preload-api-demo.component.html&quot;</span>,\n})\n<span class="hljs-keyword">export</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">PreloadApiDemoComponent</span> {\n  <span class="hljs-keyword">public</span> <span class="hljs-title function_">resolved</span>(<span class="hljs-attr">captchaResponse</span>: <span class="hljs-built_in">string</span>): <span class="hljs-built_in">void</span> {\n    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">`Resolved captcha with response: <span class="hljs-subst">${captchaResponse}</span>`</span>);\n  }\n}\n',html:'<span class="hljs-tag">&lt;<span class="hljs-name">re-captcha</span> (<span class="hljs-attr">resolved</span>)=<span class="hljs-string">&quot;resolved($event)&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">re-captcha</span>&gt;</span>\n',module:'<span class="hljs-keyword">import</span> { <span class="hljs-title class_">Injectable</span>, <span class="hljs-title class_">NgModule</span>, <span class="hljs-title class_">Optional</span>, <span class="hljs-title class_">Inject</span> } <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;@angular/core&quot;</span>;\n<span class="hljs-keyword">import</span> { <span class="hljs-title class_">CommonModule</span> } <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;@angular/common&quot;</span>;\n<span class="hljs-keyword">import</span> { <span class="hljs-title class_">Routes</span>, <span class="hljs-title class_">RouterModule</span> } <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;@angular/router&quot;</span>;\n\n<span class="hljs-keyword">import</span> { <span class="hljs-title class_">BehaviorSubject</span>, <span class="hljs-title class_">Observable</span> } <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;rxjs&quot;</span>;\n<span class="hljs-keyword">import</span> { filter } <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;rxjs/operators&quot;</span>;\n\n<span class="hljs-keyword">import</span> {\n  <span class="hljs-title class_">RecaptchaLoaderService</span>,\n  <span class="hljs-title class_">RecaptchaModule</span>,\n  <span class="hljs-title class_">RecaptchaSettings</span>,\n  <span class="hljs-variable constant_">RECAPTCHA_SETTINGS</span>,\n  <span class="hljs-variable constant_">RECAPTCHA_V3_SITE_KEY</span>,\n} <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;ng-recaptcha&quot;</span>;\n\n<span class="hljs-keyword">import</span> { parseLangFromHref } <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;../../parse-lang-from-href&quot;</span>;\n<span class="hljs-keyword">import</span> { <span class="hljs-title class_">PreloadApiDemoComponent</span> } <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;./preload-api-demo.component&quot;</span>;\n<span class="hljs-keyword">import</span> { settings } <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;./preload-api-demo.data&quot;</span>;\n<span class="hljs-keyword">import</span> { <span class="hljs-title class_">ConfigService</span> } <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;../config.service&quot;</span>;\n\n<span class="hljs-meta">@Injectable</span>()\n<span class="hljs-keyword">export</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">PreloadedRecaptchaAPIService</span> {\n  <span class="hljs-keyword">public</span> <span class="hljs-attr">ready</span>: <span class="hljs-title class_">Observable</span>&lt;<span class="hljs-title class_">ReCaptchaV2</span>.<span class="hljs-property">ReCaptcha</span>&gt;;\n\n  <span class="hljs-title function_">constructor</span>(<span class="hljs-params"><span class="hljs-meta">@Optional</span>() <span class="hljs-meta">@Inject</span>(RECAPTCHA_V3_SITE_KEY) v3SiteKey?: <span class="hljs-built_in">string</span></span>) {\n    <span class="hljs-keyword">const</span> readySubject = <span class="hljs-keyword">new</span> <span class="hljs-title class_">BehaviorSubject</span>&lt;<span class="hljs-title class_">ReCaptchaV2</span>.<span class="hljs-property">ReCaptcha</span> | <span class="hljs-literal">null</span>&gt;(<span class="hljs-literal">null</span>);\n    <span class="hljs-variable language_">this</span>.<span class="hljs-property">ready</span> = readySubject.<span class="hljs-title function_">asObservable</span>().<span class="hljs-title function_">pipe</span>(filter&lt;<span class="hljs-title class_">ReCaptchaV2</span>.<span class="hljs-property">ReCaptcha</span>&gt;(<span class="hljs-function">(<span class="hljs-params">v</span>) =&gt;</span> v != <span class="hljs-literal">null</span>));\n\n    <span class="hljs-keyword">if</span> (<span class="hljs-keyword">typeof</span> grecaptcha === <span class="hljs-string">&quot;undefined&quot;</span>) {\n      <span class="hljs-keyword">const</span> recaptchaScript = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">createElement</span>(<span class="hljs-string">&quot;script&quot;</span>);\n\n      <span class="hljs-keyword">const</span> langParam = <span class="hljs-title function_">parseLangFromHref</span>() ? <span class="hljs-string">`&amp;hl=<span class="hljs-subst">${parseLangFromHref()}</span>`</span> : <span class="hljs-string">&quot;&quot;</span>;\n\n      recaptchaScript.<span class="hljs-property">src</span> = <span class="hljs-string">`https://www.google.com/recaptcha/api.js?render=<span class="hljs-subst">${v3SiteKey}</span><span class="hljs-subst">${langParam}</span>`</span>;\n      <span class="hljs-variable language_">document</span>.<span class="hljs-property">head</span>.<span class="hljs-title function_">appendChild</span>(recaptchaScript);\n    }\n\n    <span class="hljs-keyword">const</span> interval = <span class="hljs-built_in">setInterval</span>(<span class="hljs-function">() =&gt;</span> {\n      <span class="hljs-keyword">if</span> (<span class="hljs-keyword">typeof</span> grecaptcha === <span class="hljs-string">&quot;undefined&quot;</span> || !(grecaptcha.<span class="hljs-property">render</span> <span class="hljs-keyword">instanceof</span> <span class="hljs-title class_">Function</span>)) {\n        <span class="hljs-keyword">return</span>;\n      }\n\n      <span class="hljs-built_in">clearInterval</span>(interval);\n      readySubject.<span class="hljs-title function_">next</span>(grecaptcha);\n    }, <span class="hljs-number">50</span>);\n  }\n}\n\n<span class="hljs-keyword">export</span> <span class="hljs-keyword">const</span> service = <span class="hljs-keyword">new</span> <span class="hljs-title class_">PreloadedRecaptchaAPIService</span>();\n\n<span class="hljs-keyword">const</span> <span class="hljs-attr">routes</span>: <span class="hljs-title class_">Routes</span> = [\n  {\n    <span class="hljs-attr">path</span>: <span class="hljs-string">&quot;&quot;</span>,\n    <span class="hljs-attr">component</span>: <span class="hljs-title class_">PreloadApiDemoComponent</span>,\n    <span class="hljs-attr">data</span>: { <span class="hljs-attr">page</span>: settings },\n  },\n];\n\n<span class="hljs-meta">@NgModule</span>({\n  <span class="hljs-attr">declarations</span>: [<span class="hljs-title class_">PreloadApiDemoComponent</span>],\n  <span class="hljs-attr">imports</span>: [<span class="hljs-title class_">RouterModule</span>.<span class="hljs-title function_">forChild</span>(routes), <span class="hljs-title class_">RecaptchaModule</span>, <span class="hljs-title class_">CommonModule</span>],\n  <span class="hljs-attr">providers</span>: [\n    {\n      <span class="hljs-attr">provide</span>: <span class="hljs-title class_">RecaptchaLoaderService</span>,\n      <span class="hljs-attr">useValue</span>: service,\n    },\n    {\n      <span class="hljs-attr">provide</span>: <span class="hljs-variable constant_">RECAPTCHA_V3_SITE_KEY</span>,\n      <span class="hljs-attr">useFactory</span>: <span class="hljs-function">(<span class="hljs-params">config: ConfigService</span>) =&gt;</span> {\n        <span class="hljs-keyword">return</span> config.<span class="hljs-property">recaptchaSiteKeyV3</span>;\n      },\n      <span class="hljs-attr">deps</span>: [<span class="hljs-title class_">ConfigService</span>],\n    },\n    {\n      <span class="hljs-attr">provide</span>: <span class="hljs-variable constant_">RECAPTCHA_SETTINGS</span>,\n      <span class="hljs-attr">useFactory</span>: (<span class="hljs-attr">config</span>: <span class="hljs-title class_">ConfigService</span>): <span class="hljs-function"><span class="hljs-params">RecaptchaSettings</span> =&gt;</span> {\n        <span class="hljs-keyword">return</span> { <span class="hljs-attr">siteKey</span>: config.<span class="hljs-property">recaptchaSiteKeyV2</span> };\n      },\n      <span class="hljs-attr">deps</span>: [<span class="hljs-title class_">ConfigService</span>],\n    },\n  ],\n})\n<span class="hljs-keyword">export</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">DemoModule</span> {}\n'}}}}];let C=(()=>{var s;class e{}return(s=e).\u0275fac=function(a){return new(a||s)},s.\u0275mod=p.oAB({type:s}),s.\u0275inj=p.cJS({providers:[{provide:t._l,useValue:d},{provide:t.We,useFactory:l=>l.recaptchaSiteKeyV3,deps:[i.E]},{provide:t.BZ,useFactory:l=>({siteKey:l.recaptchaSiteKeyV2}),deps:[i.E]}],imports:[g.Bz.forChild(k),t.a,m.ez]}),e})()}}]);